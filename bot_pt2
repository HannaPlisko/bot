from __future__ import print_function

import datetime
import pickle
import os.path
import phonenumbers

from google.auth.transport.requests import Request
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build

SCOPES = ['https://www.googleapis.com/auth/calendar']


    def book_timeslot(event_description, booking_time, input_PhoneNumber):

        creds = None

        if os.path.exists('token.pickle'):
            with open('token.pickle', 'rb') as token:
                creds = pickle.load(token)

        if not creds or not creds.valid:
            if creds and creds.expired and creds.refresh_token:
                creds.refresh(Request())
            else:
                flow = InstalledAppFlow.from_client_secrets_file(
                    'credentials.json', SCOPES)
                creds = flow.run_local_server(port=0)

            with open('token.pickle', 'wb') as token:
                pickle.dump(creds, token)

        service = build('calendar', 'v3', credentials=creds)

        start_time = str(datetime.datetime.now())[:10] + 'T' + booking_time + ':00+08:00'
        end_time = str(datetime.datetime.now())[:10] + 'T' + str(int(booking_time[:2]) + 1) + ':00:00+08:00'


        now = datetime.datetime.utcnow().isoformat() + 'Z'  # 'Z' indicates UTC time
        print('Выберете время....')
        events_result = service.events().list(calendarId='primary', timeMin=now,
                                              maxResults=10, singleEvents=True,
                                              orderBy='startTime').execute()
        events = events_result.get('items', [])
        if not events:
            event = {
                'summary': 'Маникюр с покрытием',
                'location': 'Minsk',
                'description': str(event_description) + 'with AutomationFeed',
                'start': {
                    'dateTime': start_time,
                    'timeZone': 'Europe/Minsk',
                },
                'end': {
                    'dateTime': end_time,
                    'timeZone': 'Europe/Minsk',
                },
                'recurrence': [
                    'RRULE:FREQ=DAILY;COUNT=1'
                ],
                'attendees': [
                    {'PhoneNumber': '+375123456789'},
                    {'PhoneNumber': str(input_PhoneNumber)},
                    {'Name': str(input_Name)},
                ],
                'reminders': {
                    'useDefault': False,
                    'overrides': [
                        {'method': 'PhoneNumber', 'minutes': 24 * 60},
                        {'method': 'popup', 'minutes': 10},
                    ],
                },
            }
            event = service.events().insert(calendarId='primary', body=event).execute()
            print('Event created: %s' % (event.get('htmlLink')))
            return True

        else:

            for event in events:
                start = event['start'].get('dateTime', event['start'].get('date'))
                if start == start_time:
                    print('Уже занято....')
                    return False

            event = {
                'summary': 'Педикюр с покрытием',
                'location': 'Minsk',
                'description': str(event_description) + 'with AutomationFeed',
                'start': {
                    'dateTime': start_time,
                    'timeZone': 'Europe/Minsk',
                },
                'end': {
                    'dateTime': end_time,
                    'timeZone': 'Europe/Minsk',
                },
                'recurrence': [
                    'RRULE:FREQ=DAILY;COUNT=1'
                ],
                'attendees': [
                    {'PhoneNumber': '+375123456789'},
                    {'PhoneNumber': str(input_PhoneNumber)},
                    {'Name': str(input_Name)},
                ],
                'reminders': {
                    'useDefault': False,
                    'overrides': [
                        {'method': 'PhoneNumber', 'minutes': 24 * 60},
                        {'method': 'popup', 'minutes': 10},
                    ],
                },
            }
            event = service.events().insert(calendarId='primary', body=event).execute()
            print('Вы записаны! : %s' % (event.get('htmlLink')))
            return True


    if __name__ == '__main__':
        input_Name = Name
        input_PhoneNumber = 'testPhoneNumber'
        booking_time = '14:00'
        result = book_timeslot('Маникюр с покрытием', booking_time, Name, input_PhoneNumber)